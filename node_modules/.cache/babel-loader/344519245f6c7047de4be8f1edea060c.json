{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const serverApi = createApi({\n  reducerPath: 'serverApi',\n  tagTypes: ['Devices'],\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/api/',\n    prepareHeaders: (headers, _ref) => {\n      let {\n        getState\n      } = _ref;\n      const token = localStorage.getItem('token');\n      headers.set('authorization', token ? `Bearer ${token}` : '');\n      return headers;\n    }\n  }),\n  endpoints: build => ({\n    checkAuth: build.query({\n      query: () => ({\n        url: `user/auth`\n      })\n    }),\n    userRegister: build.mutation({\n      query: body => ({\n        url: \"user/registration\",\n        method: 'POST',\n        body\n      })\n    }),\n    userLogin: build.mutation({\n      query: body => ({\n        url: 'user/login',\n        method: 'POST',\n        body\n      })\n    }),\n    getTypes: build.query({\n      query: () => ({\n        url: 'type'\n      })\n    }),\n    getOneDevice: build.query({\n      query: id => ({\n        url: `device/${id}`\n      })\n    }),\n    getBasket: build.query({\n      query: id => ({\n        url: `basket/${id}`\n      }),\n      providesTags: (result, error, arg) => result ? [...result.map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          type: 'Devices',\n          id\n        };\n      }), 'Devices'] : ['Devices']\n    }),\n    getDevices: build.query({\n      query: _ref3 => {\n        let {\n          type,\n          brand\n        } = _ref3;\n        return {\n          url: 'device',\n          params: {\n            typeId: type,\n            brandId: brand\n          }\n        };\n      }\n    }),\n    addBucketDevice: build.mutation({\n      query: body => ({\n        url: \"basket\",\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Devices'\n      }]\n    })\n  })\n});\nexport const {\n  useUserRegisterMutation,\n  useUserLoginMutation,\n  useCheckAuthQuery,\n  useGetTypesQuery,\n  useGetDevicesQuery,\n  useAddBucketDeviceMutation,\n  useGetBasketQuery,\n  useGetOneDeviceQuery\n} = serverApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","serverApi","reducerPath","tagTypes","baseQuery","baseUrl","prepareHeaders","headers","getState","token","localStorage","getItem","set","endpoints","build","checkAuth","query","url","userRegister","mutation","body","method","userLogin","getTypes","getOneDevice","id","getBasket","providesTags","result","error","arg","map","type","getDevices","brand","params","typeId","brandId","addBucketDevice","invalidatesTags","useUserRegisterMutation","useUserLoginMutation","useCheckAuthQuery","useGetTypesQuery","useGetDevicesQuery","useAddBucketDeviceMutation","useGetBasketQuery","useGetOneDeviceQuery"],"sources":["E:/Projects/IntMag/intMAgClient/src/components/redux/api/server.api.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\n\r\ninterface userRegister{\r\n    email:string,\r\n    password:string,\r\n    role:string,\r\n}\r\n\r\nexport const serverApi = createApi({\r\n    reducerPath: 'serverApi',\r\n    tagTypes:['Devices'],\r\n    baseQuery: fetchBaseQuery({ \r\n        baseUrl: 'http://localhost:5000/api/',\r\n        prepareHeaders:(headers,{getState}):any=>{\r\n            const token = localStorage.getItem('token'); \r\n            headers.set('authorization',token ? `Bearer ${token}` : '')\r\n            return headers\r\n        } \r\n    }),\r\n\r\n    endpoints: (build) => ({\r\n      checkAuth:build.query<any,any>({\r\n        query: () => ({\r\n          url:`user/auth`,\r\n      }),\r\n      }),\r\n      userRegister: build.mutation<void, userRegister>({\r\n        query: (body) => ({\r\n            url:\"user/registration\",\r\n            method:'POST',\r\n            body,\r\n        })\r\n      }),\r\n      userLogin:build.mutation<void,string>({\r\n        query:(body)=>({\r\n            url:'user/login',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n      getTypes:build.query<void,string>({\r\n        query:()=>({\r\n            url:'type',\r\n        })\r\n      }),\r\n      getOneDevice:build.query<void,string>({\r\n        query:(id)=>({\r\n            url:`device/${id}`,\r\n        })\r\n      }),\r\n      getBasket:build.query<void,string>({\r\n        query:(id)=>({\r\n            url:`basket/${id}`,\r\n        }),\r\n        providesTags: (result:any, error, arg) =>\r\n        result\r\n          ? [...result.map(({ id }:any) => ({ type: 'Devices' as const, id })), 'Devices']\r\n          : ['Devices'],\r\n      }),\r\n      getDevices:build.query<void,any>({\r\n        query:({type,brand}:any)=>({\r\n            url:'device',\r\n            params:{\r\n              typeId:type,\r\n              brandId:brand\r\n            }\r\n        })\r\n      }),\r\n      addBucketDevice: build.mutation<void, any>({\r\n        query: (body) => ({\r\n            url:\"basket\",\r\n            method:'POST',\r\n            body,\r\n        }),\r\n        invalidatesTags:[{type:'Devices'}]\r\n      }),\r\n    })\r\n  })\r\n\r\n  export const {\r\n    useUserRegisterMutation,\r\n    useUserLoginMutation,\r\n    useCheckAuthQuery,\r\n    useGetTypesQuery,\r\n    useGetDevicesQuery,\r\n    useAddBucketDeviceMutation,\r\n    useGetBasketQuery,\r\n    useGetOneDeviceQuery\r\n  } = serverApi\r\n\r\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AASA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,WADkB;EAE/BC,QAAQ,EAAC,CAAC,SAAD,CAFsB;EAG/BC,SAAS,EAAEJ,cAAc,CAAC;IACtBK,OAAO,EAAE,4BADa;IAEtBC,cAAc,EAAC,CAACC,OAAD,WAA0B;MAAA,IAAjB;QAACC;MAAD,CAAiB;MACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;MACAJ,OAAO,CAACK,GAAR,CAAY,eAAZ,EAA4BH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAAxD;MACA,OAAOF,OAAP;IACH;EANqB,CAAD,CAHM;EAY/BM,SAAS,EAAGC,KAAD,KAAY;IACrBC,SAAS,EAACD,KAAK,CAACE,KAAN,CAAqB;MAC7BA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE;MADO,CAAP;IADsB,CAArB,CADW;IAMrBC,YAAY,EAAEJ,KAAK,CAACK,QAAN,CAAmC;MAC/CH,KAAK,EAAGI,IAAD,KAAW;QACdH,GAAG,EAAC,mBADU;QAEdI,MAAM,EAAC,MAFO;QAGdD;MAHc,CAAX;IADwC,CAAnC,CANO;IAarBE,SAAS,EAACR,KAAK,CAACK,QAAN,CAA4B;MACpCH,KAAK,EAAEI,IAAD,KAAS;QACXH,GAAG,EAAC,YADO;QAEXI,MAAM,EAAC,MAFI;QAGXD;MAHW,CAAT;IAD8B,CAA5B,CAbW;IAoBrBG,QAAQ,EAACT,KAAK,CAACE,KAAN,CAAyB;MAChCA,KAAK,EAAC,OAAK;QACPC,GAAG,EAAC;MADG,CAAL;IAD0B,CAAzB,CApBY;IAyBrBO,YAAY,EAACV,KAAK,CAACE,KAAN,CAAyB;MACpCA,KAAK,EAAES,EAAD,KAAO;QACTR,GAAG,EAAE,UAASQ,EAAG;MADR,CAAP;IAD8B,CAAzB,CAzBQ;IA8BrBC,SAAS,EAACZ,KAAK,CAACE,KAAN,CAAyB;MACjCA,KAAK,EAAES,EAAD,KAAO;QACTR,GAAG,EAAE,UAASQ,EAAG;MADR,CAAP,CAD2B;MAIjCE,YAAY,EAAE,CAACC,MAAD,EAAaC,KAAb,EAAoBC,GAApB,KACdF,MAAM,GACF,CAAC,GAAGA,MAAM,CAACG,GAAP,CAAW;QAAA,IAAC;UAAEN;QAAF,CAAD;QAAA,OAAiB;UAAEO,IAAI,EAAE,SAAR;UAA4BP;QAA5B,CAAjB;MAAA,CAAX,CAAJ,EAAoE,SAApE,CADE,GAEF,CAAC,SAAD;IAP6B,CAAzB,CA9BW;IAuCrBQ,UAAU,EAACnB,KAAK,CAACE,KAAN,CAAsB;MAC/BA,KAAK,EAAC;QAAA,IAAC;UAACgB,IAAD;UAAME;QAAN,CAAD;QAAA,OAAqB;UACvBjB,GAAG,EAAC,QADmB;UAEvBkB,MAAM,EAAC;YACLC,MAAM,EAACJ,IADF;YAELK,OAAO,EAACH;UAFH;QAFgB,CAArB;MAAA;IADyB,CAAtB,CAvCU;IAgDrBI,eAAe,EAAExB,KAAK,CAACK,QAAN,CAA0B;MACzCH,KAAK,EAAGI,IAAD,KAAW;QACdH,GAAG,EAAC,QADU;QAEdI,MAAM,EAAC,MAFO;QAGdD;MAHc,CAAX,CADkC;MAMzCmB,eAAe,EAAC,CAAC;QAACP,IAAI,EAAC;MAAN,CAAD;IANyB,CAA1B;EAhDI,CAAZ;AAZoB,CAAD,CAA3B;AAuEL,OAAO,MAAM;EACXQ,uBADW;EAEXC,oBAFW;EAGXC,iBAHW;EAIXC,gBAJW;EAKXC,kBALW;EAMXC,0BANW;EAOXC,iBAPW;EAQXC;AARW,IAST9C,SATG"},"metadata":{},"sourceType":"module"}