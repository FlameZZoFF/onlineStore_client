{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const serverApi = createApi({\n  reducerPath: 'serverApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/api/',\n    prepareHeaders: (headers, _ref) => {\n      let {\n        getState\n      } = _ref;\n      const token = localStorage.getItem('token');\n      headers.set('authorization', token ? `Bearer ${token}` : '');\n      return headers;\n    }\n  }),\n  endpoints: build => ({\n    checkAuth: build.query({\n      query: () => ({\n        url: `user/auth`\n      })\n    }),\n    userRegister: build.mutation({\n      query: body => ({\n        url: \"user/registration\",\n        method: 'POST',\n        body\n      })\n    }),\n    userLogin: build.mutation({\n      query: body => ({\n        url: 'user/login',\n        method: 'POST',\n        body\n      })\n    }),\n    getTypes: build.query({\n      query: () => ({\n        url: 'type'\n      })\n    })\n  })\n});\nexport const {\n  useUserRegisterMutation,\n  useUserLoginMutation,\n  useCheckAuthQuery\n} = serverApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","serverApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","token","localStorage","getItem","set","endpoints","build","checkAuth","query","url","userRegister","mutation","body","method","userLogin","getTypes","useUserRegisterMutation","useUserLoginMutation","useCheckAuthQuery"],"sources":["E:/Projects/IntMag/intMAgClient/src/components/redux/api/server.api.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\n\r\ninterface userRegister{\r\n    email:string,\r\n    password:string,\r\n    role:string,\r\n}\r\n\r\nexport const serverApi = createApi({\r\n    reducerPath: 'serverApi',\r\n    baseQuery: fetchBaseQuery({ \r\n        baseUrl: 'http://localhost:5000/api/',\r\n        prepareHeaders:(headers,{getState}):any=>{\r\n            const token = localStorage.getItem('token'); \r\n            headers.set('authorization',token ? `Bearer ${token}` : '')\r\n            return headers\r\n        } \r\n    }),\r\n    endpoints: (build) => ({\r\n      checkAuth:build.query<any,any>({\r\n        query: () => ({\r\n          url:`user/auth`,\r\n      }),\r\n      }),\r\n      userRegister: build.mutation<void, userRegister>({\r\n        query: (body) => ({\r\n            url:\"user/registration\",\r\n            method:'POST',\r\n            body,\r\n        })\r\n      }),\r\n      userLogin:build.mutation<void,string>({\r\n        query:(body)=>({\r\n            url:'user/login',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n      getTypes:build.query<void,string>({\r\n        query:()=>({\r\n            url:'type',\r\n        })\r\n      })\r\n    })\r\n  })\r\n\r\n  export const {useUserRegisterMutation,useUserLoginMutation,useCheckAuthQuery} = serverApi\r\n\r\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AASA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,WADkB;EAE/BC,SAAS,EAAEH,cAAc,CAAC;IACtBI,OAAO,EAAE,4BADa;IAEtBC,cAAc,EAAC,CAACC,OAAD,WAA0B;MAAA,IAAjB;QAACC;MAAD,CAAiB;MACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;MACAJ,OAAO,CAACK,GAAR,CAAY,eAAZ,EAA4BH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAAxD;MACA,OAAOF,OAAP;IACH;EANqB,CAAD,CAFM;EAU/BM,SAAS,EAAGC,KAAD,KAAY;IACrBC,SAAS,EAACD,KAAK,CAACE,KAAN,CAAqB;MAC7BA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE;MADO,CAAP;IADsB,CAArB,CADW;IAMrBC,YAAY,EAAEJ,KAAK,CAACK,QAAN,CAAmC;MAC/CH,KAAK,EAAGI,IAAD,KAAW;QACdH,GAAG,EAAC,mBADU;QAEdI,MAAM,EAAC,MAFO;QAGdD;MAHc,CAAX;IADwC,CAAnC,CANO;IAarBE,SAAS,EAACR,KAAK,CAACK,QAAN,CAA4B;MACpCH,KAAK,EAAEI,IAAD,KAAS;QACXH,GAAG,EAAC,YADO;QAEXI,MAAM,EAAC,MAFI;QAGXD;MAHW,CAAT;IAD8B,CAA5B,CAbW;IAoBrBG,QAAQ,EAACT,KAAK,CAACE,KAAN,CAAyB;MAChCA,KAAK,EAAC,OAAK;QACPC,GAAG,EAAC;MADG,CAAL;IAD0B,CAAzB;EApBY,CAAZ;AAVoB,CAAD,CAA3B;AAsCL,OAAO,MAAM;EAACO,uBAAD;EAAyBC,oBAAzB;EAA8CC;AAA9C,IAAmExB,SAAzE"},"metadata":{},"sourceType":"module"}