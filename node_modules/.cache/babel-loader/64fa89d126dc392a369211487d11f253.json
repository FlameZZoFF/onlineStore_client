{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const serverApi = createApi({\n  reducerPath: 'serverApi',\n  tagTypes: ['DevicesBusket', 'Devices'],\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/api/',\n    prepareHeaders: (headers, _ref) => {\n      let {\n        getState\n      } = _ref;\n      const token = localStorage.getItem('token');\n      headers.set('authorization', token ? `Bearer ${token}` : '');\n      return headers;\n    }\n  }),\n  endpoints: build => ({\n    checkAuth: build.query({\n      query: () => ({\n        url: `user/auth`\n      })\n    }),\n    getBrands: build.query({\n      query: () => ({\n        url: `brand`\n      })\n    }),\n    getBrandsByType: build.query({\n      query: id => ({\n        url: `typebrand/${id}`\n      })\n    }),\n    AddBrandTypeConnection: build.mutation({\n      query: body => ({\n        url: 'typebrand',\n        method: 'POST',\n        body\n      })\n    }),\n    userRegister: build.mutation({\n      query: body => ({\n        url: \"user/registration\",\n        method: 'POST',\n        body\n      })\n    }),\n    userLogin: build.mutation({\n      query: body => ({\n        url: 'user/login',\n        method: 'POST',\n        body\n      })\n    }),\n    AddType: build.mutation({\n      query: body => ({\n        url: 'type',\n        method: 'POST',\n        body\n      })\n    }),\n    AddBrand: build.mutation({\n      query: body => ({\n        url: 'brand',\n        method: 'POST',\n        body\n      })\n    }),\n    changeDevice: build.mutation({\n      query: _ref2 => {\n        let {\n          id,\n          body\n        } = _ref2;\n        return {\n          url: `device/${id}`,\n          method: 'PUT',\n          body\n        };\n      },\n      invalidatesTags: [{\n        type: 'Devices',\n        id: 'LIST'\n      }]\n    }),\n    getTypes: build.query({\n      query: () => ({\n        url: 'type'\n      })\n    }),\n    getOneDevice: build.query({\n      query: id => ({\n        url: `device/${id}`\n      })\n    }),\n    getDevicesByName: build.query({\n      query: name => ({\n        url: `device/names/${name}`\n      })\n    }),\n    getBasket: build.query({\n      query: id => ({\n        url: `basket/${id}`\n      }),\n      providesTags: (result, error, arg) => result ? [{\n        type: 'DevicesBusket',\n        id: 'LIST'\n      }, ...result.map(_ref3 => {\n        let {\n          id\n        } = _ref3;\n        return {\n          type: 'DevicesBusket',\n          id\n        };\n      }), 'DevicesBusket'] : [{\n        type: 'DevicesBusket',\n        id: 'LIST'\n      }]\n    }),\n    getDevices: build.query({\n      query: _ref4 => {\n        let {\n          type,\n          brand,\n          sort\n        } = _ref4;\n        return {\n          url: 'device',\n          params: {\n            sort,\n            typeId: type,\n            brandId: brand\n          }\n        };\n      },\n      providesTags: (result, error, arg) => result ? [{\n        type: 'Devices',\n        id: 'LIST'\n      }, ...result.rows.map(_ref5 => {\n        let {\n          id\n        } = _ref5;\n        return {\n          type: 'Devices',\n          id\n        };\n      })] : [{\n        type: 'Devices',\n        id: 'LIST'\n      }]\n    }),\n    addDevice: build.mutation({\n      query: body => ({\n        url: \"device\",\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Devices',\n        id: 'LIST'\n      }]\n    }),\n    addBucketDevice: build.mutation({\n      query: body => ({\n        url: \"basket\",\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'DevicesBusket'\n      }]\n    }),\n    deleteDevice: build.mutation({\n      query: id => ({\n        url: `device/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Devices',\n        id: 'LIST'\n      }]\n    }),\n    deleteDeviceFromBasket: build.mutation({\n      query: _ref6 => {\n        let {\n          basketId,\n          body\n        } = _ref6;\n        return {\n          url: `basket/${basketId}`,\n          method: 'DELETE',\n          body\n        };\n      },\n      invalidatesTags: [{\n        type: 'DevicesBusket',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useUserRegisterMutation,\n  useUserLoginMutation,\n  useCheckAuthQuery,\n  useGetTypesQuery,\n  useGetDevicesQuery,\n  useAddBucketDeviceMutation,\n  useGetBasketQuery,\n  useGetOneDeviceQuery,\n  useGetBrandsByTypeQuery,\n  useAddDeviceMutation,\n  useAddTypeMutation,\n  useAddBrandMutation,\n  useDeleteDeviceMutation,\n  useGetDevicesByNameQuery,\n  useGetBrandsQuery,\n  useAddBrandTypeConnectionMutation,\n  useChangeDeviceMutation,\n  useDeleteDeviceFromBasketMutation\n} = serverApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","serverApi","reducerPath","tagTypes","baseQuery","baseUrl","prepareHeaders","headers","getState","token","localStorage","getItem","set","endpoints","build","checkAuth","query","url","getBrands","getBrandsByType","id","AddBrandTypeConnection","mutation","body","method","userRegister","userLogin","AddType","AddBrand","changeDevice","invalidatesTags","type","getTypes","getOneDevice","getDevicesByName","name","getBasket","providesTags","result","error","arg","map","getDevices","brand","sort","params","typeId","brandId","rows","addDevice","addBucketDevice","deleteDevice","deleteDeviceFromBasket","basketId","useUserRegisterMutation","useUserLoginMutation","useCheckAuthQuery","useGetTypesQuery","useGetDevicesQuery","useAddBucketDeviceMutation","useGetBasketQuery","useGetOneDeviceQuery","useGetBrandsByTypeQuery","useAddDeviceMutation","useAddTypeMutation","useAddBrandMutation","useDeleteDeviceMutation","useGetDevicesByNameQuery","useGetBrandsQuery","useAddBrandTypeConnectionMutation","useChangeDeviceMutation","useDeleteDeviceFromBasketMutation"],"sources":["E:/Projects/IntMag/intMAgClient/src/components/redux/api/server.api.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { userRegister } from '../../interfaces/IRequest';\r\n\r\nimport {IBrandsByType, IToken, IType, DeviceResponce, IBasketDevice, IDevice} from '../../interfaces/IResponse'\r\n\r\n\r\nexport const serverApi = createApi({\r\n    reducerPath: 'serverApi',\r\n    tagTypes:['DevicesBusket','Devices'],\r\n    baseQuery: fetchBaseQuery({ \r\n        baseUrl: 'http://localhost:5000/api/',\r\n        prepareHeaders:(headers,{getState}):any=>{\r\n            const token = localStorage.getItem('token'); \r\n            headers.set('authorization',token ? `Bearer ${token}` : '')\r\n            return headers\r\n        } \r\n    }),\r\n\r\n    endpoints: (build) => ({\r\n      checkAuth:build.query<IToken,string>({\r\n\r\n        query: () => ({\r\n          url:`user/auth`,\r\n          \r\n       }),\r\n      }),\r\n\r\n      getBrands:build.query<IBrandsByType[],any>({\r\n        query: () => ({\r\n          url:`brand`,\r\n       })\r\n      }),\r\n\r\n      getBrandsByType:build.query<IBrandsByType[],number>({\r\n        query: (id) => ({\r\n          url:`typebrand/${id}`,\r\n       })\r\n      }),\r\n\r\n      AddBrandTypeConnection:build.mutation<any,any>({\r\n        query:(body)=>({\r\n            url:'typebrand',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n\r\n      userRegister: build.mutation<any,any>({\r\n        query: (body) => ({\r\n            url:\"user/registration\",\r\n            method:'POST',\r\n            body,\r\n        })\r\n      }),\r\n\r\n      userLogin:build.mutation<any,any>({\r\n        query:(body)=>({\r\n            url:'user/login',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n      \r\n      AddType:build.mutation<any,any>({\r\n        query:(body)=>({\r\n            url:'type',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n      \r\n      AddBrand:build.mutation<any,any>({\r\n        query:(body)=>({\r\n            url:'brand',\r\n            method:'POST',\r\n            body\r\n        })\r\n      }),\r\n\r\n      changeDevice:build.mutation<any,any>({\r\n        query:({id,body})=>({\r\n            url:`device/${id}`,\r\n            method:'PUT',\r\n            body\r\n        }),\r\n        invalidatesTags:[{type:'Devices',id:'LIST'}]\r\n      }),\r\n\r\n      getTypes:build.query<IType[],any>({\r\n        query:()=>({\r\n            url:'type',\r\n        })\r\n      }),\r\n\r\n      getOneDevice:build.query<IDevice,any>({\r\n        query:(id)=>({\r\n            url:`device/${id}`,\r\n        })\r\n      }),\r\n\r\n      getDevicesByName:build.query<IDevice,any>({\r\n        query:(name)=>({\r\n            url:`device/names/${name}`,\r\n        })\r\n      }),\r\n\r\n      getBasket:build.query<IBasketDevice[],number>({\r\n        query:(id)=>({\r\n            url:`basket/${id}`,\r\n        }),\r\n        \r\n        providesTags: (result:any, error, arg) =>\r\n        result\r\n          ? [{type:'DevicesBusket',id:'LIST'},\r\n            ...result.map(({ id }:any) => ({ type: 'DevicesBusket' as const, id })), 'DevicesBusket'\r\n          ]\r\n          : [{type:'DevicesBusket',id:'LIST'}],\r\n      }),\r\n\r\n      getDevices:build.query<DeviceResponce,any>({\r\n        query:({type,brand,sort})=>({\r\n            url:'device',\r\n            params:{\r\n              sort,\r\n              typeId:type,\r\n              brandId:brand,\r\n            },\r\n            \r\n        }),\r\n        providesTags: (result:any, error, arg) =>\r\n        result\r\n          ? [{type:'Devices',id:'LIST'},\r\n            ...result.rows.map(({ id }:any) => ({ type: 'Devices' as const, id })),\r\n          ]\r\n          : [{type:'Devices',id:'LIST'}],\r\n      }),\r\n      \r\n\r\n      addDevice: build.mutation<any, any>({\r\n        query: (body) => ({\r\n            url:\"device\",\r\n            method:'POST',\r\n            body,\r\n        }),\r\n        invalidatesTags:[{type:'Devices',id:'LIST'}]\r\n        }),\r\n      \r\n\r\n      addBucketDevice: build.mutation<void, any>({\r\n        query: (body) => ({\r\n            url:\"basket\",\r\n            method:'POST',\r\n            body,\r\n        }),\r\n\r\n        invalidatesTags:[{type:'DevicesBusket'}]\r\n      }),\r\n      \r\n      deleteDevice: build.mutation<void, any>({\r\n        query: (id) => ({\r\n            url:`device/${id}`,\r\n            method:'DELETE'\r\n        }),\r\n\r\n        invalidatesTags:[{type:'Devices',id:'LIST'}]\r\n      }),\r\n\r\n      deleteDeviceFromBasket: build.mutation<void, any>({\r\n        query: ({basketId,body}) => ({\r\n            url:`basket/${basketId}`,\r\n            method:'DELETE',\r\n            body\r\n        }),\r\n\r\n        invalidatesTags:[{type:'DevicesBusket',id:'LIST'}]\r\n      }),\r\n    })\r\n  })\r\n\r\n  export const {\r\n    useUserRegisterMutation,\r\n    useUserLoginMutation,\r\n    useCheckAuthQuery,\r\n    useGetTypesQuery,\r\n    useGetDevicesQuery,\r\n    useAddBucketDeviceMutation,\r\n    useGetBasketQuery,\r\n    useGetOneDeviceQuery,\r\n    useGetBrandsByTypeQuery,\r\n    useAddDeviceMutation,\r\n    useAddTypeMutation,\r\n    useAddBrandMutation,\r\n    useDeleteDeviceMutation,\r\n    useGetDevicesByNameQuery,\r\n    useGetBrandsQuery,\r\n    useAddBrandTypeConnectionMutation,\r\n    useChangeDeviceMutation,\r\n    useDeleteDeviceFromBasketMutation,\r\n  } = serverApi\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}